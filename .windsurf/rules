# Commit Message Rules
- All git commit messages should be written in English.

# Core System Components
- The main application logic is in src/core.
- Shared utilities and helpers are in src/utils.
- Feature flags and configuration settings are in src/config.

# Cascade
- Cascade's backend logic is in server/cascade_engine.
- All API request handlers for Cascade are in server/cascade_api.
- Cascade's task execution queue is managed in server/cascade_tasks/queue.py.

# Frontend Code Structure
- The UI components for the assistant are in frontend/components/assistant.
- The AI command panel logic is handled in frontend/components/command_panel.tsx.
- Styles for the AI interface are in frontend/styles/assistant.css.

# Data & Storage
- Vector embeddings are stored in server/data/vector_store.
- User session history is saved in server/data/sessions.
- Logs and analytics are collected in server/logs/usage_tracking.log.

# Testing & Debugging
- End-to-end tests for Cascade are in tests/e2e/cascade_tests.
- Mock API responses for local testing are in tests/mocks/api_mocks.py.
- Debugging scripts are located in scripts/debugging_tools.



# Package Management with `uv`

These rules define strict guidelines for managing Python dependencies in this project using the `uv` dependency manager.

**‚úÖ Use `uv` exclusively**

- All Python dependencies **must be installed, synchronized, and locked** using `uv`.
- Never use `pip`, `pip-tools`, or `poetry` directly for dependency management.

**üîÅ Managing Dependencies**

Always use these commands:

```bash
# Add or upgrade dependencies
uv add <package>

# Remove dependencies
uv remove <package>

# Reinstall all dependencies from lock file
uv sync
```

**üîÅ Scripts**

```bash
# Run script with proper dependencies
uv run script.py
```

You can edit inline-metadata manually:

```python
# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "torch",
#     "torchvision",
#     "opencv-python",
#     "numpy",
#     "matplotlib",
#     "Pillow",
#     "timm",
# ]
# ///

print("some python code")
```

Or using uv cli:

```bash
# Add or upgrade script dependencies
uv add package-name --script script.py

# Remove script dependencies
uv remove package-name --script script.py

# Reinstall all script dependencies from lock file
uv sync --script script.py
```
    